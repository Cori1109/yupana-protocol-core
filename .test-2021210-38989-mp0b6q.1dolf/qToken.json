{
  "contractName": "qToken",
  "abi": [],
  "michelson": "{ parameter\n    (or (or (or (pair %approve (address %spender) (nat %value))\n                (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)))\n            (or (pair %getBalance (address %owner) (contract nat))\n                (pair %getTotalSupply unit (contract nat))))\n        (or (pair %transfer (address %from) (pair (address %to) (nat %value)))\n            (or %use\n               (or (or (or (pair %borrow (nat %amount) (address %user))\n                           (pair %liquidate (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                       (or (pair %mint (nat %amount) (address %user))\n                           (pair %redeem (nat %amount) (address %user))))\n                   (or (or (pair %repay (nat %amount) (address %user))\n                           (pair %seize (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                       (or (address %setAdmin) (address %setOwner))))\n               (address %updateControllerState)))) ;\n  storage\n    (pair (pair (pair %storage\n                   (pair (pair (pair (big_map %accountBorrows\n                                        address\n                                        (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                     (big_map %accountTokens address nat))\n                               (pair (address %admin) (nat %borrowIndex)))\n                         (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                               (pair (address %token) (nat %totalBorrows))))\n                   (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply)))\n                (big_map %tokenLambdas\n                   nat\n                   (lambda\n                      (pair (or (or (or (pair %iApprove (address %spender) (nat %value))\n                                        (pair %iGetAllowance (pair (address %owner) (address %spender)) (contract nat)))\n                                    (or (pair %iGetBalance (address %owner) (contract nat))\n                                        (pair %iGetTotalSupply unit (contract nat))))\n                                (pair %iTransfer (address %from) (pair (address %to) (nat %value))))\n                            (pair (pair (pair (pair (big_map %accountBorrows\n                                                       address\n                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                                    (big_map %accountTokens address nat))\n                                              (pair (address %admin) (nat %borrowIndex)))\n                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                              (pair (address %token) (nat %totalBorrows))))\n                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))\n                      (pair (list operation)\n                            (pair (pair (pair (pair (big_map %accountBorrows\n                                                       address\n                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                                    (big_map %accountTokens address nat))\n                                              (pair (address %admin) (nat %borrowIndex)))\n                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                              (pair (address %token) (nat %totalBorrows))))\n                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply)))))))\n          (big_map %useLambdas\n             nat\n             (lambda\n                (pair (pair (or (or (or (or (pair %borrow (nat %amount) (address %user))\n                                            (pair %liquidate (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                                        (or (pair %mint (nat %amount) (address %user))\n                                            (pair %redeem (nat %amount) (address %user))))\n                                    (or (or (pair %repay (nat %amount) (address %user))\n                                            (pair %seize (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                                        (or (address %setAdmin) (address %setOwner))))\n                                (address %updateControllerState))\n                            (pair (pair (pair (pair (big_map %accountBorrows\n                                                       address\n                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                                    (big_map %accountTokens address nat))\n                                              (pair (address %admin) (nat %borrowIndex)))\n                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                              (pair (address %token) (nat %totalBorrows))))\n                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))\n                      address)\n                (pair (list operation)\n                      (pair (pair (pair (pair (big_map %accountBorrows\n                                                 address\n                                                 (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                              (big_map %accountTokens address nat))\n                                        (pair (address %admin) (nat %borrowIndex)))\n                                  (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                        (pair (address %token) (nat %totalBorrows))))\n                            (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))))) ;\n  code { DUP ;\n         CDR ;\n         SELF ;\n         ADDRESS ;\n         DIG 2 ;\n         CAR ;\n         IF_LEFT\n           { SWAP ;\n             DROP ;\n             IF_LEFT\n               { IF_LEFT\n                   { LEFT (pair (pair address address) (contract nat)) ;\n                     LEFT (or (pair address (contract nat)) (pair unit (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR }\n                   { RIGHT (pair address nat) ;\n                     LEFT (or (pair address (contract nat)) (pair unit (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR } }\n               { IF_LEFT\n                   { LEFT (pair unit (contract nat)) ;\n                     RIGHT (or (pair address nat) (pair (pair address address) (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR }\n                   { RIGHT (pair address (contract nat)) ;\n                     RIGHT (or (pair address nat) (pair (pair address address) (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR } } }\n           { IF_LEFT\n               { SWAP ;\n                 DROP ;\n                 RIGHT\n                   (or (or (pair address nat) (pair (pair address address) (contract nat)))\n                       (or (pair address (contract nat)) (pair unit (contract nat)))) ;\n                 SWAP ;\n                 DUP ;\n                 CAR ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 IF_LEFT\n                   { IF_LEFT\n                       { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                       { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                   { DROP ; PUSH nat 0 } ;\n                 GET ;\n                 IF_NONE\n                   { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                   { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                 SWAP ;\n                 DUP ;\n                 DUG 2 ;\n                 CDR ;\n                 DIG 2 ;\n                 CAR ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 CDR ;\n                 PAIR ;\n                 PAIR ;\n                 SWAP ;\n                 CAR ;\n                 PAIR }\n               { PAIR ;\n                 PAIR ;\n                 DUP ;\n                 CAR ;\n                 CAR ;\n                 SWAP ;\n                 DUP ;\n                 DUG 2 ;\n                 CDR ;\n                 DUP ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 IF_LEFT\n                   { IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 4 } { DROP ; PUSH nat 6 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 3 } } }\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 5 } { DROP ; PUSH nat 7 } }\n                           { IF_LEFT { DROP ; PUSH nat 0 } { DROP ; PUSH nat 1 } } } }\n                   { DROP ; PUSH nat 8 } ;\n                 GET ;\n                 IF_NONE\n                   { SWAP ;\n                     DROP ;\n                     SWAP ;\n                     DROP ;\n                     PUSH string \"qToken/middleUse/function-not-set\" ;\n                     FAILWITH }\n                   { DIG 3 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CAR ;\n                     CAR ;\n                     DIG 4 ;\n                     PAIR ;\n                     PAIR ;\n                     EXEC } ;\n                 SWAP ;\n                 DUP ;\n                 DUG 2 ;\n                 CDR ;\n                 DIG 2 ;\n                 CAR ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 CDR ;\n                 PAIR ;\n                 PAIR ;\n                 SWAP ;\n                 CAR ;\n                 PAIR } } } }\n\n",
  "source": "{ parameter\n    (or (or (or (pair %approve (address %spender) (nat %value))\n                (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)))\n            (or (pair %getBalance (address %owner) (contract nat))\n                (pair %getTotalSupply unit (contract nat))))\n        (or (pair %transfer (address %from) (pair (address %to) (nat %value)))\n            (or %use\n               (or (or (or (pair %borrow (nat %amount) (address %user))\n                           (pair %liquidate (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                       (or (pair %mint (nat %amount) (address %user))\n                           (pair %redeem (nat %amount) (address %user))))\n                   (or (or (pair %repay (nat %amount) (address %user))\n                           (pair %seize (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                       (or (address %setAdmin) (address %setOwner))))\n               (address %updateControllerState)))) ;\n  storage\n    (pair (pair (pair %storage\n                   (pair (pair (pair (big_map %accountBorrows\n                                        address\n                                        (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                     (big_map %accountTokens address nat))\n                               (pair (address %admin) (nat %borrowIndex)))\n                         (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                               (pair (address %token) (nat %totalBorrows))))\n                   (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply)))\n                (big_map %tokenLambdas\n                   nat\n                   (lambda\n                      (pair (or (or (or (pair %iApprove (address %spender) (nat %value))\n                                        (pair %iGetAllowance (pair (address %owner) (address %spender)) (contract nat)))\n                                    (or (pair %iGetBalance (address %owner) (contract nat))\n                                        (pair %iGetTotalSupply unit (contract nat))))\n                                (pair %iTransfer (address %from) (pair (address %to) (nat %value))))\n                            (pair (pair (pair (pair (big_map %accountBorrows\n                                                       address\n                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                                    (big_map %accountTokens address nat))\n                                              (pair (address %admin) (nat %borrowIndex)))\n                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                              (pair (address %token) (nat %totalBorrows))))\n                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))\n                      (pair (list operation)\n                            (pair (pair (pair (pair (big_map %accountBorrows\n                                                       address\n                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                                    (big_map %accountTokens address nat))\n                                              (pair (address %admin) (nat %borrowIndex)))\n                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                              (pair (address %token) (nat %totalBorrows))))\n                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply)))))))\n          (big_map %useLambdas\n             nat\n             (lambda\n                (pair (pair (or (or (or (or (pair %borrow (nat %amount) (address %user))\n                                            (pair %liquidate (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                                        (or (pair %mint (nat %amount) (address %user))\n                                            (pair %redeem (nat %amount) (address %user))))\n                                    (or (or (pair %repay (nat %amount) (address %user))\n                                            (pair %seize (pair (nat %amount) (address %borrower)) (address %liquidator)))\n                                        (or (address %setAdmin) (address %setOwner))))\n                                (address %updateControllerState))\n                            (pair (pair (pair (pair (big_map %accountBorrows\n                                                       address\n                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                                    (big_map %accountTokens address nat))\n                                              (pair (address %admin) (nat %borrowIndex)))\n                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                              (pair (address %token) (nat %totalBorrows))))\n                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))\n                      address)\n                (pair (list operation)\n                      (pair (pair (pair (pair (big_map %accountBorrows\n                                                 address\n                                                 (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))\n                                              (big_map %accountTokens address nat))\n                                        (pair (address %admin) (nat %borrowIndex)))\n                                  (pair (pair (timestamp %lastUpdateTime) (address %owner))\n                                        (pair (address %token) (nat %totalBorrows))))\n                            (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))))) ;\n  code { DUP ;\n         CDR ;\n         SELF ;\n         ADDRESS ;\n         DIG 2 ;\n         CAR ;\n         IF_LEFT\n           { SWAP ;\n             DROP ;\n             IF_LEFT\n               { IF_LEFT\n                   { LEFT (pair (pair address address) (contract nat)) ;\n                     LEFT (or (pair address (contract nat)) (pair unit (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR }\n                   { RIGHT (pair address nat) ;\n                     LEFT (or (pair address (contract nat)) (pair unit (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR } }\n               { IF_LEFT\n                   { LEFT (pair unit (contract nat)) ;\n                     RIGHT (or (pair address nat) (pair (pair address address) (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR }\n                   { RIGHT (pair address (contract nat)) ;\n                     RIGHT (or (pair address nat) (pair (pair address address) (contract nat))) ;\n                     LEFT (pair address (pair address nat)) ;\n                     SWAP ;\n                     DUP ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                       { DROP ; PUSH nat 0 } ;\n                     GET ;\n                     IF_NONE\n                       { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                       { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                     SWAP ;\n                     DUP ;\n                     DUG 2 ;\n                     CDR ;\n                     DIG 2 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CDR ;\n                     PAIR ;\n                     PAIR ;\n                     SWAP ;\n                     CAR ;\n                     PAIR } } }\n           { IF_LEFT\n               { SWAP ;\n                 DROP ;\n                 RIGHT\n                   (or (or (pair address nat) (pair (pair address address) (contract nat)))\n                       (or (pair address (contract nat)) (pair unit (contract nat)))) ;\n                 SWAP ;\n                 DUP ;\n                 CAR ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 IF_LEFT\n                   { IF_LEFT\n                       { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }\n                       { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }\n                   { DROP ; PUSH nat 0 } ;\n                 GET ;\n                 IF_NONE\n                   { SWAP ; DROP ; PUSH string \"qToken/middleToken/function-not-set\" ; FAILWITH }\n                   { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; DIG 3 ; PAIR ; EXEC } ;\n                 SWAP ;\n                 DUP ;\n                 DUG 2 ;\n                 CDR ;\n                 DIG 2 ;\n                 CAR ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 CDR ;\n                 PAIR ;\n                 PAIR ;\n                 SWAP ;\n                 CAR ;\n                 PAIR }\n               { PAIR ;\n                 PAIR ;\n                 DUP ;\n                 CAR ;\n                 CAR ;\n                 SWAP ;\n                 DUP ;\n                 DUG 2 ;\n                 CDR ;\n                 DUP ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 IF_LEFT\n                   { IF_LEFT\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 4 } { DROP ; PUSH nat 6 } }\n                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 3 } } }\n                       { IF_LEFT\n                           { IF_LEFT { DROP ; PUSH nat 5 } { DROP ; PUSH nat 7 } }\n                           { IF_LEFT { DROP ; PUSH nat 0 } { DROP ; PUSH nat 1 } } } }\n                   { DROP ; PUSH nat 8 } ;\n                 GET ;\n                 IF_NONE\n                   { SWAP ;\n                     DROP ;\n                     SWAP ;\n                     DROP ;\n                     PUSH string \"qToken/middleUse/function-not-set\" ;\n                     FAILWITH }\n                   { DIG 3 ;\n                     CAR ;\n                     CDR ;\n                     DIG 2 ;\n                     DUP ;\n                     DUG 3 ;\n                     CAR ;\n                     CAR ;\n                     DIG 4 ;\n                     PAIR ;\n                     PAIR ;\n                     EXEC } ;\n                 SWAP ;\n                 DUP ;\n                 DUG 2 ;\n                 CDR ;\n                 DIG 2 ;\n                 CAR ;\n                 CDR ;\n                 DIG 2 ;\n                 DUP ;\n                 DUG 3 ;\n                 CDR ;\n                 PAIR ;\n                 PAIR ;\n                 SWAP ;\n                 CAR ;\n                 PAIR } } } }\n\n",
  "sourcePath": "/Users/oleh/Desktop/BasicLendingProtocol/contracts/main/qToken.tz",
  "compiler": {
    "name": "@truffle/compile-michelson",
    "version": "0.2.0-tezos.1"
  },
  "networks": {},
  "schemaVersion": "3.2.0-tezos.1",
  "updatedAt": "2021-03-10T17:28:31.304Z"
}