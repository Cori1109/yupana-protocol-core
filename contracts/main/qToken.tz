{ parameter
    (or (or (or (pair %approve (address %spender) (nat %value))
                (pair %getAllowance
                   (address %owner)
                   (pair (address %spender) (contract %receiver nat))))
            (or (pair %getBalance (address %owner) (contract %receiver nat))
                (pair %getTotalSupply unit (contract nat))))
        (or (pair %transfer (address %from) (pair (address %to) (nat %value)))
            (or %use
               (or (or (or (pair %borrow (nat %amount) (address %user))
                           (pair %liquidate
                              (pair (nat %amount) (address %borrower))
                              (pair (address %collateralToken) (address %liquidator))))
                       (or (pair %mint (nat %amount) (address %user))
                           (pair %redeem (nat %amount) (address %user))))
                   (or (or (pair %repay (nat %amount) (address %user))
                           (pair %seize (pair (nat %amount) (address %borrower)) (address %liquidator)))
                       (or (address %setAdmin) (address %setOwner))))
               (address %updateControllerState)))) ;
  storage
    (pair (pair (pair %storage
                   (pair (pair (pair (big_map %accountBorrows
                                        address
                                        (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))
                                     (big_map %accountTokens address nat))
                               (pair (address %admin) (nat %borrowIndex)))
                         (pair (pair (timestamp %lastUpdateTime) (address %owner))
                               (pair (address %token) (nat %totalBorrows))))
                   (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply)))
                (big_map %tokenLambdas
                   nat
                   (lambda
                      (pair (or (or (or (pair %iApprove (address %spender) (nat %value))
                                        (pair %iGetAllowance
                                           (address %owner)
                                           (pair (address %spender) (contract %receiver nat))))
                                    (or (pair %iGetBalance (address %owner) (contract %receiver nat))
                                        (pair %iGetTotalSupply unit (contract nat))))
                                (pair %iTransfer (address %from) (pair (address %to) (nat %value))))
                            (pair (pair (pair (pair (big_map %accountBorrows
                                                       address
                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))
                                                    (big_map %accountTokens address nat))
                                              (pair (address %admin) (nat %borrowIndex)))
                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))
                                              (pair (address %token) (nat %totalBorrows))))
                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))
                      (pair (list operation)
                            (pair (pair (pair (pair (big_map %accountBorrows
                                                       address
                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))
                                                    (big_map %accountTokens address nat))
                                              (pair (address %admin) (nat %borrowIndex)))
                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))
                                              (pair (address %token) (nat %totalBorrows))))
                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply)))))))
          (big_map %useLambdas
             nat
             (lambda
                (pair (pair (or (or (or (or (pair %borrow (nat %amount) (address %user))
                                            (pair %liquidate
                                               (pair (nat %amount) (address %borrower))
                                               (pair (address %collateralToken) (address %liquidator))))
                                        (or (pair %mint (nat %amount) (address %user))
                                            (pair %redeem (nat %amount) (address %user))))
                                    (or (or (pair %repay (nat %amount) (address %user))
                                            (pair %seize (pair (nat %amount) (address %borrower)) (address %liquidator)))
                                        (or (address %setAdmin) (address %setOwner))))
                                (address %updateControllerState))
                            (pair (pair (pair (pair (big_map %accountBorrows
                                                       address
                                                       (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))
                                                    (big_map %accountTokens address nat))
                                              (pair (address %admin) (nat %borrowIndex)))
                                        (pair (pair (timestamp %lastUpdateTime) (address %owner))
                                              (pair (address %token) (nat %totalBorrows))))
                                  (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))
                      address)
                (pair (list operation)
                      (pair (pair (pair (pair (big_map %accountBorrows
                                                 address
                                                 (pair (pair (map %allowances address nat) (nat %amount)) (nat %lastBorrowIndex)))
                                              (big_map %accountTokens address nat))
                                        (pair (address %admin) (nat %borrowIndex)))
                                  (pair (pair (timestamp %lastUpdateTime) (address %owner))
                                        (pair (address %token) (nat %totalBorrows))))
                            (pair (pair (nat %totalLiquid) (nat %totalReserves)) (nat %totalSupply))))))) ;
  code { UNPAIR ;
         SELF_ADDRESS ;
         SWAP ;
         IF_LEFT
           { SWAP ;
             DROP ;
             IF_LEFT
               { IF_LEFT
                   { LEFT (pair address (pair address (contract nat))) ;
                     LEFT (or (pair address (contract nat)) (pair unit (contract nat))) ;
                     LEFT (pair address (pair address nat)) ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }
                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }
                       { DROP ; PUSH nat 0 } ;
                     GET ;
                     IF_NONE
                       { DROP ; PUSH string "qTokenMiddleTokenFunctionNotSet" ; FAILWITH }
                       { DIG 2 ; DUP ; DUG 3 ; CAR ; CAR ; DIG 2 ; PAIR ; EXEC } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR }
                   { RIGHT (pair address nat) ;
                     LEFT (or (pair address (contract nat)) (pair unit (contract nat))) ;
                     LEFT (pair address (pair address nat)) ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }
                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }
                       { DROP ; PUSH nat 0 } ;
                     GET ;
                     IF_NONE
                       { DROP ; PUSH string "qTokenMiddleTokenFunctionNotSet" ; FAILWITH }
                       { DIG 2 ; DUP ; DUG 3 ; CAR ; CAR ; DIG 2 ; PAIR ; EXEC } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR } }
               { IF_LEFT
                   { LEFT (pair unit (contract nat)) ;
                     RIGHT (or (pair address nat) (pair address (pair address (contract nat)))) ;
                     LEFT (pair address (pair address nat)) ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }
                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }
                       { DROP ; PUSH nat 0 } ;
                     GET ;
                     IF_NONE
                       { DROP ; PUSH string "qTokenMiddleTokenFunctionNotSet" ; FAILWITH }
                       { DIG 2 ; DUP ; DUG 3 ; CAR ; CAR ; DIG 2 ; PAIR ; EXEC } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR }
                   { RIGHT (pair address (contract nat)) ;
                     RIGHT (or (pair address nat) (pair address (pair address (contract nat)))) ;
                     LEFT (pair address (pair address nat)) ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }
                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }
                       { DROP ; PUSH nat 0 } ;
                     GET ;
                     IF_NONE
                       { DROP ; PUSH string "qTokenMiddleTokenFunctionNotSet" ; FAILWITH }
                       { DIG 2 ; DUP ; DUG 3 ; CAR ; CAR ; DIG 2 ; PAIR ; EXEC } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR } } }
           { IF_LEFT
               { SWAP ;
                 DROP ;
                 RIGHT
                   (or (or (pair address nat) (pair address (pair address (contract nat))))
                       (or (pair address (contract nat)) (pair unit (contract nat)))) ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 3 } }
                       { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 4 } } }
                   { DROP ; PUSH nat 0 } ;
                 GET ;
                 IF_NONE
                   { DROP ; PUSH string "qTokenMiddleTokenFunctionNotSet" ; FAILWITH }
                   { DIG 2 ; DUP ; DUG 3 ; CAR ; CAR ; DIG 2 ; PAIR ; EXEC } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 4 } { DROP ; PUSH nat 6 } }
                           { IF_LEFT { DROP ; PUSH nat 2 } { DROP ; PUSH nat 3 } } }
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 5 } { DROP ; PUSH nat 7 } }
                           { IF_LEFT { DROP ; PUSH nat 0 } { DROP ; PUSH nat 1 } } } }
                   { DROP ; PUSH nat 8 } ;
                 GET ;
                 IF_NONE
                   { DROP 2 ;
                     PUSH string "qTokenMiddleTokenFunctionNotSetInMiddleUse" ;
                     FAILWITH }
                   { DIG 2 ; DIG 3 ; DUP ; DUG 4 ; CAR ; CAR ; DIG 3 ; PAIR ; PAIR ; EXEC } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR } } } }

